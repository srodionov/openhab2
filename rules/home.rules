import java.lang.String
import java.lang.StringBuffer

/*
import java.util.Date

import org.openhab.core.library.types.*
import java.util.Date
import java.text.SimpleDateFormat
import java.lang.Math
import java.lang.Integer
import java.lang.Long
import java.lang.Double
import java.lang.String
*/

var Number Lum_threshold = 10
var boolean isPowerLost = false
var Timer EntranceLight_timer = null
var Number LightDelayMin = 5

rule "System started"
when
	System started
then	
	sendTelegram("srodionovBot", "OpenHab started")
	createTimer(now.plusSeconds(60)) [|
		sendCommand(bootCompleted, ON)
	]	
	sendCommand(bootCompleted, OFF)
end

rule "Power lost"
when
	Item Input_status changed
then	
	var String state
	state = Input_status.state.toString()

	if (state.startsWith("OB"))
	{
		isPowerLost = true
		sendTelegram("srodionovBot", "Power lost")
	} 
	else if (state.startsWith("OL") && isPowerLost == true) 
	{
		isPowerLost = false
		sendTelegram("srodionovBot", "Power restored")
	}
end

rule "System disarmed"
when 
	Item srodionov_laptop changed from OFF to ON or
	Item srodionov_cell_wifi changed from OFF to ON or
	Item srodionov_cell_geo changed from OFF to ON or
	Item arodionov_cell_geo changed from OFF to ON
then
	sendCommand(armed, OFF)
end

rule "System armed"
when 
	Item srodionov_cell_geo received update
then
	if (arodionov_cell_geo.state == OFF && srodionov_cell_geo.state == OFF && srodionov_laptop.state == OFF && srodionov_cell_wifi.state == OFF)
	{
		sendCommand(armed, ON)
	}
end

rule "Lights"
when 
	Item Garden_Luminosity changed or
	Item armed changed or 
	Time cron "0 0/1 * * * ?"	// every minute
then
	if (bootCompleted == OFF) break

	var OnOffType heaterState

	if (armed.state == OFF) 
		heaterState = ON
	else 
		heaterState = OFF

	Heaters?.members.forEach(Switch|
		if (Switch.state != heaterState) sendCommand(Switch, heaterState)
	)

	if (Elevation.state < 0)
	//if (Garden_Luminosity.state < Lum_threshold)
	{
		Garden_Front_Lights?.members.forEach(Switch|
			if (Switch.state == OFF) sendCommand(Switch, ON)
		)

		if (armed.state == OFF)
		{
			Garden_Entrance_Lights?.members.forEach(Switch|
				if (Switch.state == OFF) sendCommand(Switch, ON)
			)
			Garden_Back_Lights?.members.forEach(Switch|
				if (Switch.state == OFF) sendCommand(Switch, ON)
			)
		}
	}
	else
	{
		Garden_Lights?.members.forEach(Switch|
			if (Switch.state == ON) sendCommand(Switch, OFF)
		)
	}
end

rule "Aircon update"
when
	Item AC_mode received update or
	Item AC_temp received update or
	Item AC_fan received update or
	Item AC_v_flow received update or
	Item AC_h_flow received update
then
	if (bootCompleted == OFF) break

	var String bitCommand1 = ""
	var String bitCommand2 = ""
	var String tempBin = ""
	var Number checkSum = 0

	// command 1
	// byte 1
	// sleep
	tempBin = "0"

	// move shutters
	if (AC_v_flow.state == 1 || AC_v_flow.state == 7 || AC_v_flow.state == 8 || AC_v_flow.state == 9 || AC_h_flow.state == 1 || AC_h_flow.state == 8)
		tempBin = tempBin + "1"
	else
		tempBin = tempBin + "0"

	// fan speed
	if (AC_mode.state == 5) //DRY
		postUpdate(AC_fan, 1)
	tempBin = tempBin + String::format("%2s", Integer.toBinaryString((AC_fan.state as Number).intValue)).replace(' ', '0')

	// On/Off
	if (AC_mode.state == 0)
		tempBin = tempBin + "0"
	else
		tempBin = tempBin + "1"
	
	// Heat
	if (AC_mode.state == 3 || AC_mode.state == 2)
		tempBin = tempBin + "1"
	else
		tempBin = tempBin + "0"

	// mode
	if (AC_mode.state == 4) //COLD
		tempBin = tempBin + "01"
	else if (AC_mode.state == 5) //DRY
		tempBin = tempBin + "10"
	else if (AC_mode.state == 6) //FAN
		tempBin = tempBin + "11"
	else // HEAT/ANTIFREEZE/AUTO
		tempBin = tempBin + "00"

	checkSum = checkSum + Integer.parseInt(tempBin.substring(4, 8), 2)
	bitCommand1 = bitCommand1 + new StringBuffer(tempBin).reverse().toString()

	// byte 2
	//timer
	tempBin = "0000"
	
	// temperature
	tempBin = tempBin + String::format("%4s", Integer.toBinaryString((AC_temp.state as Number).intValue - 16)).replace(' ', '0')

	checkSum = checkSum + Integer.parseInt(tempBin.substring(4, 8), 2)
	bitCommand1 = bitCommand1 + new StringBuffer(tempBin).reverse().toString()

	// byte 3
	// 0
	tempBin = "0"

	// Cold plasma
	tempBin = tempBin + "1"

	// Indicator
	tempBin = tempBin + "1"

	// Turbo fan
	tempBin = tempBin + "0"

	//timer
	tempBin = tempBin + "0000"

	checkSum = checkSum + Integer.parseInt(tempBin.substring(4, 8), 2)
	bitCommand1 = bitCommand1 + new StringBuffer(tempBin).reverse().toString()

	// byte 4
	// message number/id
	tempBin = "0101"

	// 000
	tempBin = tempBin + "000"

	// external ventilation
	tempBin = tempBin + "0"

	checkSum = checkSum + Integer.parseInt(tempBin.substring(0, 4), 2)
	checkSum = checkSum + Integer.parseInt(tempBin.substring(4, 8), 2)

	bitCommand1 = bitCommand1 + new StringBuffer(tempBin).reverse().toString()

//	logInfo("AirCon","bitCommand1 : [{}]", bitCommand1)

	// command 2
	// byte 1

	//horizontal flow
	tempBin = String::format("%4s", Integer.toBinaryString((AC_h_flow.state as Number).intValue)).replace(' ', '0')

	//vertical flow
	tempBin = tempBin + String::format("%4s", Integer.toBinaryString((AC_v_flow.state as Number).intValue)).replace(' ', '0')

	checkSum = checkSum + Integer.parseInt(tempBin.substring(0, 4), 2)
	bitCommand2 = bitCommand2 + new StringBuffer(tempBin).reverse().toString()

	// byte 2
	// message number/id
	tempBin = "0100"

	// 0
	tempBin = tempBin + "0"

	// iFeel
	tempBin = tempBin + "0"

	// indicate temperature
	tempBin = tempBin + "10"

	checkSum = checkSum + Integer.parseInt(tempBin.substring(0, 4), 2)
	bitCommand2 = bitCommand2 + new StringBuffer(tempBin).reverse().toString()

	// byte 3
	// 00000000
	tempBin = "00000000"
	bitCommand2 = bitCommand2 + new StringBuffer(tempBin).reverse().toString()

	// byte 4
	// checksum
	checkSum = checkSum + 5
	checkSum = checkSum + Integer.parseInt(tempBin.substring(0, 4), 2)
	tempBin = String::format("%8s", Integer.toBinaryString(checkSum.byteValue())).replace(' ', '0')
	tempBin = tempBin.substring(4, 8)

	// 0
	tempBin = tempBin + "0"

	// antifreeze
	if (AC_mode.state == 2)
		tempBin = tempBin + "1"
	else
		tempBin = tempBin + "0"

	// 00
	tempBin = tempBin + "00"

	bitCommand2 = bitCommand2 + new StringBuffer(tempBin).reverse().toString()

//	logInfo("AirCon","bitCommand2 : [{}]", bitCommand2)

	var String hexStr1 = Long.toString(Long.parseLong(bitCommand1,2),16)
	var String hexStr2 = Long.toString(Long.parseLong(bitCommand2,2),16)

	sendCommand(AC_cmd, hexStr1 + "," + hexStr2)

//	logInfo("AirCon","Command1: [{}] Command2: [{}]", hexStr1, hexStr2)
//	logInfo("AirCon","aircon_mode.state: [{}] ", aircon_mode.previousState(false).state)
//	aircon_mode.persist

end

rule "Power monitor"
when
	Item Power_Counter received update
then
	var Number KW = (Power_Counter.state as DecimalType)/3200
	var Number diffSec = (now.millis - Power_Meter.lastUpdate.toDateTime.millis)/1000
	if (diffSec != 0) {
		var Number KWh = (60/diffSec)*KW*60
		postUpdate(Power_Consumption_KWh, KWh)
		if (KWh.floatValue > 6.00){
			sendTelegram("srodionovBot", "High load: " + String::format("%.2f", KWh.floatValue) + " KWh")
		}
	}

	if (Power_Meter.state == NULL){
		postUpdate(Power_Meter, 0)
	}
	postUpdate(Power_Meter, (Power_Meter.state as DecimalType) + KW)
end

rule "Entrance motion detected"
when
	Item EntranceSteet_MS changed from OFF to ON or
	Item EntranceGarden_MS changed from OFF to ON
then
	if (Garden_Luminosity.state < Lum_threshold) {
		Garden_Entrance_Lights?.members.forEach(Switch|
			if (Switch.state != ON) sendCommand(Switch, ON)
		)

		EntranceLight_timer = createTimer(now.plusMinutes(LightDelayMin)) [|
			Garden_Entrance_Lights?.members.forEach(Switch|
				if (Switch.state != OFF) sendCommand(Switch, OFF)
			)
		]
	}

	if (EntranceLight_timer != null) {            
		EntranceLight_timer.reschedule(now.plusMinutes(LightDelayMin))
	}

	if (armed.state == ON){
		if (EntranceSteet_MS.state == ON)
    			sendTelegramPhoto("srodionovBot", "http://192.168.3.150:8765/picture/2/current", null)
		if (EntranceGarden_MS.state == ON)
    			sendTelegramPhoto("srodionovBot", "http://192.168.3.150:8765/picture/1/current", null)
	}
end

rule "Parse srodionov location"
when 
	Item srodionov_location_RAW changed
then
	val String json = (srodionov_location_RAW.state as StringType).toString
	val String type = transform("JSONPATH", "$._type", json)
	if (type == "location") 
	{
		val String latLon = transform("JSONPATH", "$.lat", json) + "," + transform("JSONPATH", "$.lon", json)
		srodionov_location.postUpdate(latLon)
	}
end

rule "Parse arodionov location"
when 
	Item arodionov_location_RAW changed
then
	val String json = (arodionov_location_RAW.state as StringType).toString
	val String type = transform("JSONPATH", "$._type", json)
	if (type == "location") 
	{
		val String latLon = transform("JSONPATH", "$.lat", json) + "," + transform("JSONPATH", "$.lon", json)
		arodionov_location.postUpdate(latLon)
	}
end

//	logInfo("log.info", diffSec.toString())
//	sendTelegram("srodionovBot", "Seconds elapsed: " + diffSec.toString())



